<?php


namespace App\Repositories;


use App\DbModels\Order;
use App\DbModels\OrderDetail;
use App\Events\OrderCashback\OrderCashbackCreatedEvent;
use App\Repositories\Contracts\OrderCashbackRepository;
use App\Repositories\Contracts\OrderDetailRepository;
use App\Repositories\Contracts\OrderRepository;
use App\Repositories\Contracts\ProductOfferRepository;
use App\Repositories\Contracts\ProductRepository;
use App\Repositories\Contracts\UserAccountRepository;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class EloquentOrderCashbackRepository extends EloquentBaseRepository implements OrderCashbackRepository
{
    public function save(array $data): \ArrayAccess
    {
        $data['date'] = isset($data['date']) ? $data['date'] : Carbon::now();
        $data['status'] = isset($data['status']) ? $data['status'] : OrderDetail::CASHBACK_STATUS_ADDED;
        $orderCashback = parent::save($data); // TODO: Change the autogenerated stub

        event(new OrderCashbackCreatedEvent($orderCashback, $this->generateEventOptionsForModel()));
        return $orderCashback;
    }

    public function getCashbackAbleOrderLists(array $searchCriteria = [], $getAllData = true) {

        $orderDetailRepository = app(OrderDetailRepository::class);
        $orderDetailTable = $orderDetailRepository->getModel()->getTable();

        $orderRepository = app(OrderRepository::class);
        $orderModelTable = $orderRepository->getModel()->getTable();

        $productRepository = app(ProductRepository::class);
        $productModelTable = $productRepository->getModel()->getTable();

        $productOfferRepository = app(ProductOfferRepository::class);
        $productOfferModelTable = $productOfferRepository->getModel()->getTable();

        $userAccountRepository = app(UserAccountRepository::class);
        $userAccountModelTable = $userAccountRepository->getModel()->getTable();

        $optionalQuery = isset($searchCriteria['orderDetailId']) ? $orderDetailTable . '.id = ' .  $searchCriteria['orderDetailId'] : '1 = 1';

        $endDate = isset($searchCriteria['endDate']) ? Carbon::parse($searchCriteria['endDate']) : Carbon::now();
        $startDate = isset($searchCriteria['startDate']) ? Carbon::parse($searchCriteria['startDate']) : Carbon::now();

        $queryBuilder = DB::table($orderDetailTable)
            ->select($orderDetailTable . '.id', $orderDetailTable . '.orderId', $orderModelTable . '.invoice', $productModelTable . '.name', $userAccountModelTable . '.id as userAccountId',
                $orderDetailTable . '.productPrice', $orderDetailTable . '.productQuantity', $orderModelTable . '.createdByUserId', $orderModelTable . '.paymentStatus',
                $orderModelTable . '.status', $productOfferModelTable . '.cashback', $productOfferModelTable . '.cashbackType', $orderDetailTable . '.created_at' )
            ->join($orderModelTable, $orderDetailTable . '.orderId', '=', $orderModelTable . '.id')
            ->join($productModelTable, $orderDetailTable . '.productId', '=', $productModelTable . '.id')
            ->join($productOfferModelTable, $orderDetailTable . '.productId', '=', $productOfferModelTable . '.productId')
            ->join($userAccountModelTable, $orderDetailTable . '.createdByUserId', '=', $userAccountModelTable . '.userId')
            ->where($productOfferModelTable . '.cashback', '>', 0)
            ->where($orderModelTable . '.status', Order::STATUS_PROCESSING)
            ->where($orderDetailTable . '.cashbackStatus', OrderDetail::CASHBACK_STATUS_PENDING)
            ->whereRaw(DB::raw($optionalQuery))
            ->orderBy($orderDetailTable . '.created_at', 'ASC');


        if ($getAllData) {
            return $queryBuilder->paginate();
        } else {
            return $queryBuilder->latest()->first();
        }
    }

    public function getACashbackAbleOrderDetail(array $searchCriteria = [], $getAllData = false) {
        return $this->getCashbackAbleOrderLists($searchCriteria, false);
    }
}

