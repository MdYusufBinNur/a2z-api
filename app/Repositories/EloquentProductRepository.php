<?php


namespace App\Repositories;

use App\DbModels\Brand;
use App\DbModels\MetaAndSlug;
use App\DbModels\Vendor;
use App\Events\Product\ProductCreatedEvent;
use App\Repositories\Contracts\BrandRepository;
use App\Repositories\Contracts\ProductOfferRepository;
use App\Repositories\Contracts\ProductRepository;
use App\Repositories\Contracts\ProductSpecsAndStateRepository;
use App\Repositories\Contracts\ProductStockRepository;
use App\Repositories\Contracts\VendorRepository;
use ArrayAccess;
use Illuminate\Support\Facades\DB;

class EloquentProductRepository extends EloquentBaseRepository implements ProductRepository
{
    /**
     * inherit doc
     * @param array $searchCriteria
     * @param bool $withTrashed
     * @return mixed
     */
    public function findBy(array $searchCriteria = [], $withTrashed = false)
    {
        $searchCriteria = $this->applyFilterInProductSearch($searchCriteria);

        return parent::findBy($searchCriteria, $withTrashed); // TODO: Change the autogenerated stub
    }

    /**
     * inherit doc
     * @param array $data
     * @return ArrayAccess
     */
    public function save(array $data): \ArrayAccess
    {
        DB::beginTransaction();

        $product = parent::save($data);

        if (isset($data['productSpecsAndState'])) {
            $data['productSpecsAndState']['productId'] = $product->id;

            $productSpecsAndStateRepository = app(ProductSpecsAndStateRepository::class);
            $productSpecsAndStateRepository->save($data['productSpecsAndState']);
        }

        event(new ProductCreatedEvent($product, $data['productStock'], $data['productStockInLog'], $this->generateEventOptionsForModel()));

        DB::commit();

        $metaAndSlug['type'] = MetaAndSlug::TYPE_PRODUCT;
        $metaAndSlug['routePath'] = MetaAndSlug::ROUTE_PATH_PRODUCT;
        $metaAndSlug['keywords'] = $product->name;
        $metaAndSlug['resourceId'] = $product->id;
        $metaAndSlug['slugPath'] = $product->slug;

        $product->metaAndSlug()->create($metaAndSlug);

        return $product;
    }


    /**
     * shorten the search based on search criteria
     *
     * @param $searchCriteria
     * @return mixed
     */
    private function applyFilterInProductSearch($searchCriteria)
    {
        if (isset($searchCriteria['query'])) {
            $searchCriteria['id'] = $this->model->where('name', 'like', '%' . $searchCriteria['query'] . '%')
                ->orWhere('surname', 'like', '%' . $searchCriteria['query'] . '%')
                ->pluck('id')->toArray();
            unset($searchCriteria['query']);
        }

        if (isset($searchCriteria['brand'])) {
            $brandRepository = app(BrandRepository::class);
            $brand = $brandRepository->findOneBy(['slug' => $searchCriteria['brand']]);
            if($brand instanceof Brand) {
                $searchCriteria['brandId'] = $brand->id;
            }
            unset($searchCriteria['brand']);
        }

        if (isset($searchCriteria['vendor'])) {
            $vendorRepository = app(VendorRepository::class);
            $vendor = $vendorRepository->findOneBy(['slug' => $searchCriteria['vendor']]);
            if($vendor instanceof Vendor) {
                $searchCriteria['vendorId'] = $vendor->id;
            }
            unset($searchCriteria['vendor']);
        }

        if (isset($searchCriteria['minPrice']) || isset($searchCriteria['maxPrice'])) {
            $start = $searchCriteria['minPrice'] ?? 1;
            $end = $searchCriteria['maxPrice'] ?? 1000000;

            $productStockRepository = app(ProductStockRepository::class);

            $queryBuilder = $productStockRepository->model->select('productId');
            $searchCriteria['id'] = $queryBuilder->where('price','>=',$start)
                ->where('price','<=',$end)
                ->pluck('productId')->toArray();

            unset($searchCriteria['minPrice']);
            unset($searchCriteria['maxPrice']);
        }

        if (isset($searchCriteria['productOffer']) && isset($searchCriteria['campaignId'])) {

            $productOfferRepository = app(ProductOfferRepository::class);
            $queryBuilder = $productOfferRepository->model->select('productId');

            $queryBuilder = $queryBuilder->where('campaignId', $searchCriteria['campaignId']);
            $queryBuilder = $queryBuilder->where('isActive', true);

            $productIds = $queryBuilder->pluck('productId')->toArray();

            if (isset($searchCriteria['id'])) {
                if (is_array($searchCriteria['id'])) {
                    $searchCriteria['id'] = array_intersect($searchCriteria['id'], $productIds);
                } else {
                    $searchCriteria['id'] = array_intersect(explode(',', $searchCriteria['id']), $productIds);
                }
            } else {
                $searchCriteria['id'] = $productIds;
            }

            unset($searchCriteria['productOffer']);
            unset($searchCriteria['campaignId']);
        }

        if (isset($searchCriteria['id'])) {
            $searchCriteria['id'] = is_array($searchCriteria['id']) ? implode(",", array_unique($searchCriteria['id'])) : $searchCriteria['id'];
        }

        return $searchCriteria;
    }

}
