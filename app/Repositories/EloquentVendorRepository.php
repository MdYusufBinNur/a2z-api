<?php


namespace App\Repositories;


use App\DbModels\MetaAndSlug;
use App\DbModels\PasswordReset;
use App\DbModels\PaymentMethod;
use App\DbModels\Role;
use App\Repositories\Contracts\CategoryRepository;
use App\Repositories\Contracts\PasswordResetRepository;
use App\Repositories\Contracts\ProductOfferRepository;
use App\Repositories\Contracts\SubCategoryRepository;
use App\Repositories\Contracts\UserProfileRepository;
use App\Repositories\Contracts\UserRepository;
use App\Repositories\Contracts\UserRoleRepository;
use App\Repositories\Contracts\VendorRepository;
use Illuminate\Support\Facades\DB;

class EloquentVendorRepository extends EloquentBaseRepository implements VendorRepository
{
    /**
     * @inheritDoc
     */
    public function save(array $data): \ArrayAccess
    {
        DB::beginTransaction();

        $userRepository = app(UserRepository::class);

        if (isset($data['user'])) {
            $data['user']['isActive'] = false;
            $user = $userRepository->save($data['user']);
            $data['userId'] = $user->id;
        }

        if (!isset($data['acceptPaymentMethods'])) {
            $data['acceptPaymentMethods'] = PaymentMethod::defaultPaymentMethods();

        }

        //create user role
        $userRoleRepository = app(UserRoleRepository::class);
        $userRole = $userRoleRepository->save(['roleId' => Role::ROLE_VENDOR_STANDARD['id'],  'userId' => $data['userId']]);

        $data['userRoleId'] = $userRole->id;

        $vendor = parent::save($data);

        DB::commit();

        //create pin to set password
        $passwordResetRepository = app(PasswordResetRepository::class);
        $passwordResetRepository->save(['userId' => $data['userId'], 'type' => PasswordReset::TYPE_SET_PASSWORD_BY_PIN]);

        $metaAndSlug['type'] = MetaAndSlug::TYPE_VENDOR;
        $metaAndSlug['routePath'] = MetaAndSlug::ROUTE_PATH_VENDOR;
        $metaAndSlug['keywords'] = $vendor->name;
        $metaAndSlug['resourceId'] = $vendor->id;
        $metaAndSlug['slugPath'] = $vendor->slug;

        $vendor->metaAndSlug()->create($metaAndSlug);

        return $vendor;
    }


    /**
     * inherit doc
     * @param array $searchCriteria
     * @param bool $withTrashed
     * @return mixed
     */
    public function findBy(array $searchCriteria = [], $withTrashed = false)
    {
        if(isset($searchCriteria['subCategoryIds']) && is_numeric($searchCriteria['subCategoryIds'])) {
            $searchCriteria['subCategoryIds'] = (array) $searchCriteria['subCategoryIds'];
        }

        $searchCriteria = $this->applyFilterInVendorSearch($searchCriteria);

        return parent::findBy($searchCriteria, $withTrashed); // TODO: Change the autogenerated stub
    }

    /**
     * shorten the search based on search criteria
     *
     * @param $searchCriteria
     * @return mixed
     */
    private function applyFilterInVendorSearch($searchCriteria)
    {
        if (isset($searchCriteria['query'])) {
            $searchCriteria['id'] = $this->model
                ->where('name', 'like', '%'.$searchCriteria['query'].'%')
                ->orwhere('email', 'like', '%'.$searchCriteria['query'].'%')
                ->orWhere('address', 'like', '%'.$searchCriteria['query'].'%')
                ->pluck('id')->toArray();
            unset($searchCriteria['query']);
        }

        if (isset($searchCriteria['categoryId'])) {
            $subCategoryRepository = app(SubCategoryRepository::class);
            $searchCriteria['subCategoryIds'] = $subCategoryRepository->model->select('id')
                ->where('categoryId', $searchCriteria['categoryId'])
                ->pluck('id')->toArray();
            unset($searchCriteria['categoryId']);
        };

        $queryBuilder = $this->model;

        if (!empty($searchCriteria['subCategoryIds'])) {
            $queryBuilder = $this->applySearchInJsonField($queryBuilder, 'subCategoryIds', $searchCriteria['subCategoryIds']);
            $searchCriteria['id'] = $queryBuilder->pluck('id')->toArray();
            unset($searchCriteria['subCategoryIds']);
        };


        if (isset($searchCriteria['campaignId'])) {
            $productOfferRepository = app(ProductOfferRepository::class);
            $queryBuilder = $productOfferRepository->model->select('vendorId');

            $queryBuilder = $queryBuilder->where('campaignId', $searchCriteria['campaignId']);
            $queryBuilder = $queryBuilder->where('isActive', true);

            $vendorIds = $queryBuilder->pluck('vendorId')->toArray();

            if (isset($searchCriteria['id'])) {
                if (is_array($searchCriteria['id'])) {
                    $searchCriteria['id'] = array_intersect($searchCriteria['id'], $vendorIds);
                } else {
                    $searchCriteria['id'] = array_intersect(explode(',', $searchCriteria['id']), $vendorIds);
                }
            } else {
                $searchCriteria['id'] = $vendorIds;
            }

            unset($searchCriteria['campaignId']);
        }

        if (isset($searchCriteria['id'])) {
            $searchCriteria['id'] = is_array($searchCriteria['id']) ? implode(",", array_unique($searchCriteria['id'])) : $searchCriteria['id'];
        }

        return $searchCriteria;
    }

}
